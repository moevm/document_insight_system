{% extends "layout.jinja2" %}

{% block title %}Ввод данных для шаблона{% endblock %}

{% block content %}
<link href="{{request.static_url('templater:static/css/styles.css')}}" rel="stylesheet" />

<div class="input-data-container">
    <h1>Ввод данных для шаблона: {{ template.name }}</h1>

    <form id="input-data-form">
        <div id="fields-container">
            {% if template.data %}
                {% for key, field in template.data.items() %}
                <div class="form-group">
                    <label>Название поля</label>
                    <input type="text" class="form-control" name="label_{{ key }}" value="{{ field.label }}" required>

                    <label>Значение поля</label>
                    <input type="text" class="form-control" name="value_{{ key }}" value="{{ field.value }}" required>
                </div>
                {% endfor %}
            {% else %}
                {% for i in range(3) %}
                <div class="form-group">
                    <label>Название поля</label>
                    <input type="text" class="form-control" name="label_field_{{ i }}" required>

                    <label>Значение поля</label>
                    <input type="text" class="form-control" name="value_field_{{ i }}" required>
                </div>
                {% endfor %}
            {% endif %}
        </div>

        <button type="button" id="add-field-btn" class="btn btn-add">Добавить поле</button>

        <div class="button-group" style="margin-top: 15px;">
            <button type="button" class="btn btn-cancel" onclick="window.location.href='/templates'">Отмена</button>
            <button type="submit" class="btn btn-save">Сохранить данные</button>
        </div>
    </form>
</div>

<script>
let formChanged = false;
let newFieldCount = 0;

document.getElementById('add-field-btn').addEventListener('click', () => {
    const container = document.getElementById('fields-container');
    const fieldId = `new_field_${newFieldCount++}`;

    const div = document.createElement('div');
    div.className = 'form-group';

    div.innerHTML = `
        <label>Название поля</label>
        <input type="text" class="form-control" name="label_${fieldId}" required>

        <label>Значение поля</label>
        <input type="text" class="form-control" name="value_${fieldId}" required>
    `;

    container.appendChild(div);
    formChanged = true;
});

document.getElementById('input-data-form').addEventListener('input', () => {
    formChanged = true;
});

window.addEventListener('beforeunload', (e) => {
    if (formChanged) {
        e.preventDefault();
        e.returnValue = '';
    }
});

const saveBtn = document.querySelector('.btn-save');
const cancelBtn = document.querySelector('.btn-cancel');

document.getElementById('input-data-form').addEventListener('submit', async (event) => {
    event.preventDefault();

    saveBtn.disabled = true;
    cancelBtn.disabled = true;
    saveBtn.textContent = 'Сохранение...';

    const form = event.target;
    const formData = new FormData(form);
    const entries = Array.from(formData.entries());

    const data = {};
    const labels = entries.filter(([key]) => key.startsWith('label_'));
    for (let [labelKey, labelValue] of labels) {
        const suffix = labelKey.substring(6);
        const value = formData.get(`value_${suffix}`);
        if (!labelValue.trim() || !value.trim()) {
            alert("Все поля должны быть заполнены");
            saveBtn.disabled = false;
            cancelBtn.disabled = false;
            saveBtn.textContent = 'Сохранить данные';
            return;
        }
        data[suffix] = { label: labelValue.trim(), value: value.trim() };
    }

    try {
        const response = await fetch('/api/save_template_data/{{ template.id }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ data }),
        });

        if (response.ok) {
            formChanged = false;
            alert("Данные успешно сохранены");
            window.location.href = '/templates';
        } else {
            const errorData = await response.json();
            alert(`Ошибка: ${errorData.error || 'Неизвестная ошибка'}`);
            saveBtn.disabled = false;
            cancelBtn.disabled = false;
            saveBtn.textContent = 'Сохранить данные';
        }
    } catch (error) {
        alert("Ошибка при отправке данных на сервер");
        console.error(error);
        saveBtn.disabled = false;
        cancelBtn.disabled = false;
        saveBtn.textContent = 'Сохранить данные';
    }
});
</script>
{% endblock %}