============================= test session starts ==============================
platform linux -- Python 3.8.10, pytest-7.1.2, pluggy-1.0.0
rootdir: /home/michael/Desktop/work/mse_auto_checking_slides_vaganov/app/main/mse22/for_testing/test
plugins: celery-4.4.7
collected 28 items

document_test.py FF......F                                               [ 32%]
page_creator_test.py ...........FFF.FFFF                                 [100%]

=================================== FAILURES ===================================
______________ TestDocument.test_empty_file[LR-expected_errors0] _______________

self = <document_test.TestDocument object at 0x7f492672f070>
tmp_path = PosixPath('/tmp/pytest-of-michael/pytest-24/test_empty_file_LR_expected_er0')
file_type = 'LR'
expected_errors = ['Цель работы', 'Основные теоретические положения', 'Выполнение работы', 'Тестирование', 'Выводы']

    @pytest.mark.parametrize("file_type, expected_errors", [
        ("LR", sections_lab), ("FWQ", sections_fwq)
    ])
    def test_empty_file(self, tmp_path, file_type, expected_errors):
        docx_document = docx.Document()
        filename = tmp_path.as_posix() + "empty.docx"
        docx_document.save(filename)
>       parsed_document = Document(docx_document, filename, file_type)

document_test.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../document/document.py:12: in __init__
    self.pages, self.errors = PageCreator().createPageObjects(filename, file_type)
../../document/page_creator.py:50: in createPageObjects
    indices, errors = self.makeIndices(docx_docx2python, file_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <app.main.mse22.document.page_creator.PageCreator object at 0x7f49266eb490>
doc_result = DocxContent(docx_reader=DocxReader(), docx2python_kwargs={'docx_filename': '/tmp/pytest-of-michael/pytest-24/test_empt..., 'image_folder': None, 'html': False, 'paragraph_styles': False, 'extract_image': None, 'docx_context': DocxReader()})
file_type = 'LR'

    def makeIndices(self, doc_result, file_type):
        if file_type == 'LR':
            chapters = ['Цель работы', 'Основные теоретические положения',
                        'Выполнение работы', 'Тестирование', 'Выводы']
        else:
            chapters = ['ЗАДАНИЕ НА ВЫПУСКНУЮ КВАЛИФИКАЦИОННУЮ РАБОТУ',
                        'КАЛЕНДАРНЫЙ ПЛАН ВЫПОЛНЕНИЯ ВЫПУСКНОЙ КВАЛИФИКАЦИОННОЙ РАБОТЫ', 'РЕФЕРАТ', 'ABSTRACT',
                        'СОДЕРЖАНИЕ', 'ОПРЕДЕЛЕНИЯ, ОБОЗНАЧЕНИЯ И СОКРАЩЕНИЯ', 'ВВЕДЕНИЕ', 'ЗАКЛЮЧЕНИЕ',
                        'СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ']
        i_start = [0, 0]
        docx_chapters = []
        errors = []
        cur_index = 0
        cur_chapter = 0
        application_pattern = r'ПРИЛОЖЕНИЕ [ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ]{1}'
        find_index = 0
        while cur_chapter != len(chapters):
            if cur_index == len(doc_result.body):
                if chapters[cur_chapter] != 'ОПРЕДЕЛЕНИЯ, ОБОЗНАЧЕНИЯ И СОКРАЩЕНИЯ':
                    errors.append(chapters[cur_chapter])
                cur_chapter += 1
    
                if not docx_chapters:
                    cur_index = 0
                else:
                    cur_index = docx_chapters[-1][0][0]
    
                if cur_chapter == len(chapters):
                    break
    
>           if len(doc_result.body[cur_index]) > 1:  # table
E           IndexError: list index out of range

../../document/page_creator.py:128: IndexError
______________ TestDocument.test_empty_file[FWQ-expected_errors1] ______________

self = <document_test.TestDocument object at 0x7f492672f0a0>
tmp_path = PosixPath('/tmp/pytest-of-michael/pytest-24/test_empty_file_FWQ_expected_e0')
file_type = 'FWQ'
expected_errors = ['ЗАДАНИЕ НА ВЫПУСКНУЮ КВАЛИФИКАЦИОННУЮ РАБОТУ', 'КАЛЕНДАРНЫЙ ПЛАН ВЫПОЛНЕНИЯ ВЫПУСКНОЙ КВАЛИФИКАЦИОННОЙ РАБОТЫ', 'РЕФЕРАТ', 'ABSTRACT', 'СОДЕРЖАНИЕ', 'ОПРЕДЕЛЕНИЯ, ОБОЗНАЧЕНИЯ И СОКРАЩЕНИЯ', ...]

    @pytest.mark.parametrize("file_type, expected_errors", [
        ("LR", sections_lab), ("FWQ", sections_fwq)
    ])
    def test_empty_file(self, tmp_path, file_type, expected_errors):
        docx_document = docx.Document()
        filename = tmp_path.as_posix() + "empty.docx"
        docx_document.save(filename)
>       parsed_document = Document(docx_document, filename, file_type)

document_test.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../document/document.py:12: in __init__
    self.pages, self.errors = PageCreator().createPageObjects(filename, file_type)
../../document/page_creator.py:50: in createPageObjects
    indices, errors = self.makeIndices(docx_docx2python, file_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <app.main.mse22.document.page_creator.PageCreator object at 0x7f49266fee80>
doc_result = DocxContent(docx_reader=DocxReader(), docx2python_kwargs={'docx_filename': '/tmp/pytest-of-michael/pytest-24/test_empt..., 'image_folder': None, 'html': False, 'paragraph_styles': False, 'extract_image': None, 'docx_context': DocxReader()})
file_type = 'FWQ'

    def makeIndices(self, doc_result, file_type):
        if file_type == 'LR':
            chapters = ['Цель работы', 'Основные теоретические положения',
                        'Выполнение работы', 'Тестирование', 'Выводы']
        else:
            chapters = ['ЗАДАНИЕ НА ВЫПУСКНУЮ КВАЛИФИКАЦИОННУЮ РАБОТУ',
                        'КАЛЕНДАРНЫЙ ПЛАН ВЫПОЛНЕНИЯ ВЫПУСКНОЙ КВАЛИФИКАЦИОННОЙ РАБОТЫ', 'РЕФЕРАТ', 'ABSTRACT',
                        'СОДЕРЖАНИЕ', 'ОПРЕДЕЛЕНИЯ, ОБОЗНАЧЕНИЯ И СОКРАЩЕНИЯ', 'ВВЕДЕНИЕ', 'ЗАКЛЮЧЕНИЕ',
                        'СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ']
        i_start = [0, 0]
        docx_chapters = []
        errors = []
        cur_index = 0
        cur_chapter = 0
        application_pattern = r'ПРИЛОЖЕНИЕ [ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ]{1}'
        find_index = 0
        while cur_chapter != len(chapters):
            if cur_index == len(doc_result.body):
                if chapters[cur_chapter] != 'ОПРЕДЕЛЕНИЯ, ОБОЗНАЧЕНИЯ И СОКРАЩЕНИЯ':
                    errors.append(chapters[cur_chapter])
                cur_chapter += 1
    
                if not docx_chapters:
                    cur_index = 0
                else:
                    cur_index = docx_chapters[-1][0][0]
    
                if cur_chapter == len(chapters):
                    break
    
>           if len(doc_result.body[cur_index]) > 1:  # table
E           IndexError: list index out of range

../../document/page_creator.py:128: IndexError
_ TestDocument.test_pre_made_failing_lab_docx[../test_files/docx/failing-5.docx-expected_errors4] _

self = <document_test.TestDocument object at 0x7f492672f880>
filename = '../test_files/docx/failing-5.docx'
expected_errors = ['Цель работы', 'Основные теоретические положения', 'Выполнение работы', 'Тестирование', 'Выводы']

    @pytest.mark.parametrize("filename, expected_errors", [
        ("../test_files/docx/failing-1.docx", ["Выполнение работы"]),
        ("../test_files/docx/failing-2.docx", ["Цель работы"]),
        ("../test_files/docx/failing-3.docx", ["Цель работы"]),
        ("../test_files/docx/failing-4.docx", ["Основные теоретические положения"]),
        ("../test_files/docx/failing-5.docx", ['Цель работы', 'Основные теоретические положения',
                                               'Выполнение работы', 'Тестирование', 'Выводы'])
    ])
    def test_pre_made_failing_lab_docx(self, filename, expected_errors):
        parsed_document = Document(docx.Document(filename), filename, "LR")
        assert parsed_document.errors == expected_errors
        sections = ["Титульный лист"] + self.sections_lab
        for section in parsed_document.errors:
            sections.remove(section)
        actual_sections = [page.header for page in parsed_document.pages]
        for section in actual_sections:
            if re.compile("ПРИЛОЖЕНИЕ [А-ЯЁ]").match(section):
                actual_sections.remove(section)
>       assert actual_sections == sections
E       AssertionError: assert ['Титульный лист', ''] == ['Титульный лист']
E         Left contains one more item: ''
E         Use -v to get more diff

document_test.py:78: AssertionError
_ test_make_content[../test_files/content/list-with-mandatory-caps.docx-0-2-expected_result1] _

filename = '../test_files/content/list-with-mandatory-caps.docx', body = 0
paragraph = 2
expected_result = (True, ['Изучение литературы', 'Текст 1', 'Текст 2'], 8)

    @pytest.mark.parametrize("filename, body, paragraph, expected_result", [
        # Список без раздела "Заключение"
        (
            "../test_files/content/list-no-conclusion.docx", 0, 2, (False, None, None)
        ),
        # Список со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/list-with-mandatory-caps.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 8)
        ),
        # Список без некоторых требуемых отслеживаемых разделов (присутствующие отслеживаемые разделы в содержании капсом)
        # (нет переноса строки после содержания)
        (
            "../test_files/content/list-without-mandatory.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 7)
        ),
        # Список со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании обычным шрифтом)
        (
            "../test_files/content/list-with-mandatory-normal.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 8)
        ),
        # Таблица без раздела "Заключение"
        (
            "../test_files/content/table-no-conclusion.docx", 1, 1,
            (False, None, None)
        ),
        # Таблица со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/table-with-mandatory-caps.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Таблица без некоторых требуемых отслеживаемых разделов (присутствующие отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/table-without-mandatory.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Таблица со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании обычным шрифтом)
        (
            "../test_files/content/table-with-mandatory-normal.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Автосгенерированное содержание
        (
            "../test_files/content/toc.docx", 1, 1,
            (True, ["1. Первый раздел", "1.1. Первый подраздел первого раздела",
                    "1.2. Второй подраздел первого раздела", "2. ВТОРОЙ раздел", "2.1. Первый подраздел второго раздела",
                    "2.2. Второй подраздел второго раздела"], 0)
        )
    ])
    def test_make_content(filename, body, paragraph, expected_result):
>       assert PageCreator.make_content(docx2python(filename), body, paragraph) == expected_result
E       AssertionError: assert (False, None, None) == (True, ['Изуч...'Текст 2'], 8)
E         At index 0 diff: False != True
E         Use -v to get more diff

page_creator_test.py:114: AssertionError
_ test_make_content[../test_files/content/list-without-mandatory.docx-0-2-expected_result2] _

filename = '../test_files/content/list-without-mandatory.docx', body = 0
paragraph = 2
expected_result = (True, ['Изучение литературы', 'Текст 1', 'Текст 2'], 7)

    @pytest.mark.parametrize("filename, body, paragraph, expected_result", [
        # Список без раздела "Заключение"
        (
            "../test_files/content/list-no-conclusion.docx", 0, 2, (False, None, None)
        ),
        # Список со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/list-with-mandatory-caps.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 8)
        ),
        # Список без некоторых требуемых отслеживаемых разделов (присутствующие отслеживаемые разделы в содержании капсом)
        # (нет переноса строки после содержания)
        (
            "../test_files/content/list-without-mandatory.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 7)
        ),
        # Список со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании обычным шрифтом)
        (
            "../test_files/content/list-with-mandatory-normal.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 8)
        ),
        # Таблица без раздела "Заключение"
        (
            "../test_files/content/table-no-conclusion.docx", 1, 1,
            (False, None, None)
        ),
        # Таблица со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/table-with-mandatory-caps.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Таблица без некоторых требуемых отслеживаемых разделов (присутствующие отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/table-without-mandatory.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Таблица со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании обычным шрифтом)
        (
            "../test_files/content/table-with-mandatory-normal.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Автосгенерированное содержание
        (
            "../test_files/content/toc.docx", 1, 1,
            (True, ["1. Первый раздел", "1.1. Первый подраздел первого раздела",
                    "1.2. Второй подраздел первого раздела", "2. ВТОРОЙ раздел", "2.1. Первый подраздел второго раздела",
                    "2.2. Второй подраздел второго раздела"], 0)
        )
    ])
    def test_make_content(filename, body, paragraph, expected_result):
>       assert PageCreator.make_content(docx2python(filename), body, paragraph) == expected_result
E       AssertionError: assert (False, None, None) == (True, ['Изуч...'Текст 2'], 7)
E         At index 0 diff: False != True
E         Use -v to get more diff

page_creator_test.py:114: AssertionError
_ test_make_content[../test_files/content/list-with-mandatory-normal.docx-0-2-expected_result3] _

filename = '../test_files/content/list-with-mandatory-normal.docx', body = 0
paragraph = 2
expected_result = (True, ['Изучение литературы', 'Текст 1', 'Текст 2'], 8)

    @pytest.mark.parametrize("filename, body, paragraph, expected_result", [
        # Список без раздела "Заключение"
        (
            "../test_files/content/list-no-conclusion.docx", 0, 2, (False, None, None)
        ),
        # Список со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/list-with-mandatory-caps.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 8)
        ),
        # Список без некоторых требуемых отслеживаемых разделов (присутствующие отслеживаемые разделы в содержании капсом)
        # (нет переноса строки после содержания)
        (
            "../test_files/content/list-without-mandatory.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 7)
        ),
        # Список со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании обычным шрифтом)
        (
            "../test_files/content/list-with-mandatory-normal.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 8)
        ),
        # Таблица без раздела "Заключение"
        (
            "../test_files/content/table-no-conclusion.docx", 1, 1,
            (False, None, None)
        ),
        # Таблица со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/table-with-mandatory-caps.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Таблица без некоторых требуемых отслеживаемых разделов (присутствующие отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/table-without-mandatory.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Таблица со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании обычным шрифтом)
        (
            "../test_files/content/table-with-mandatory-normal.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Автосгенерированное содержание
        (
            "../test_files/content/toc.docx", 1, 1,
            (True, ["1. Первый раздел", "1.1. Первый подраздел первого раздела",
                    "1.2. Второй подраздел первого раздела", "2. ВТОРОЙ раздел", "2.1. Первый подраздел второго раздела",
                    "2.2. Второй подраздел второго раздела"], 0)
        )
    ])
    def test_make_content(filename, body, paragraph, expected_result):
>       assert PageCreator.make_content(docx2python(filename), body, paragraph) == expected_result
E       AssertionError: assert (False, None, None) == (True, ['Изуч...'Текст 2'], 8)
E         At index 0 diff: False != True
E         Use -v to get more diff

page_creator_test.py:114: AssertionError
_ test_make_content[../test_files/content/table-with-mandatory-caps.docx-1-1-expected_result5] _

filename = '../test_files/content/table-with-mandatory-caps.docx', body = 1
paragraph = 1
expected_result = (True, ['Текущее положение вещей', 'Список использованных источников', 'Приложение А. Название приложения'], 0)

    @pytest.mark.parametrize("filename, body, paragraph, expected_result", [
        # Список без раздела "Заключение"
        (
            "../test_files/content/list-no-conclusion.docx", 0, 2, (False, None, None)
        ),
        # Список со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/list-with-mandatory-caps.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 8)
        ),
        # Список без некоторых требуемых отслеживаемых разделов (присутствующие отслеживаемые разделы в содержании капсом)
        # (нет переноса строки после содержания)
        (
            "../test_files/content/list-without-mandatory.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 7)
        ),
        # Список со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании обычным шрифтом)
        (
            "../test_files/content/list-with-mandatory-normal.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 8)
        ),
        # Таблица без раздела "Заключение"
        (
            "../test_files/content/table-no-conclusion.docx", 1, 1,
            (False, None, None)
        ),
        # Таблица со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/table-with-mandatory-caps.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Таблица без некоторых требуемых отслеживаемых разделов (присутствующие отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/table-without-mandatory.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Таблица со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании обычным шрифтом)
        (
            "../test_files/content/table-with-mandatory-normal.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Автосгенерированное содержание
        (
            "../test_files/content/toc.docx", 1, 1,
            (True, ["1. Первый раздел", "1.1. Первый подраздел первого раздела",
                    "1.2. Второй подраздел первого раздела", "2. ВТОРОЙ раздел", "2.1. Первый подраздел второго раздела",
                    "2.2. Второй подраздел второго раздела"], 0)
        )
    ])
    def test_make_content(filename, body, paragraph, expected_result):
>       assert PageCreator.make_content(docx2python(filename), body, paragraph) == expected_result
E       AssertionError: assert (False, None, None) == (True, ['Теку...иложения'], 0)
E         At index 0 diff: False != True
E         Use -v to get more diff

page_creator_test.py:114: AssertionError
_ test_make_content[../test_files/content/table-without-mandatory.docx-1-1-expected_result6] _

filename = '../test_files/content/table-without-mandatory.docx', body = 1
paragraph = 1
expected_result = (True, ['Текущее положение вещей', 'Список использованных источников', 'Приложение А. Название приложения'], 0)

    @pytest.mark.parametrize("filename, body, paragraph, expected_result", [
        # Список без раздела "Заключение"
        (
            "../test_files/content/list-no-conclusion.docx", 0, 2, (False, None, None)
        ),
        # Список со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/list-with-mandatory-caps.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 8)
        ),
        # Список без некоторых требуемых отслеживаемых разделов (присутствующие отслеживаемые разделы в содержании капсом)
        # (нет переноса строки после содержания)
        (
            "../test_files/content/list-without-mandatory.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 7)
        ),
        # Список со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании обычным шрифтом)
        (
            "../test_files/content/list-with-mandatory-normal.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 8)
        ),
        # Таблица без раздела "Заключение"
        (
            "../test_files/content/table-no-conclusion.docx", 1, 1,
            (False, None, None)
        ),
        # Таблица со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/table-with-mandatory-caps.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Таблица без некоторых требуемых отслеживаемых разделов (присутствующие отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/table-without-mandatory.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Таблица со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании обычным шрифтом)
        (
            "../test_files/content/table-with-mandatory-normal.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Автосгенерированное содержание
        (
            "../test_files/content/toc.docx", 1, 1,
            (True, ["1. Первый раздел", "1.1. Первый подраздел первого раздела",
                    "1.2. Второй подраздел первого раздела", "2. ВТОРОЙ раздел", "2.1. Первый подраздел второго раздела",
                    "2.2. Второй подраздел второго раздела"], 0)
        )
    ])
    def test_make_content(filename, body, paragraph, expected_result):
>       assert PageCreator.make_content(docx2python(filename), body, paragraph) == expected_result
E       AssertionError: assert (False, None, None) == (True, ['Теку...иложения'], 0)
E         At index 0 diff: False != True
E         Use -v to get more diff

page_creator_test.py:114: AssertionError
_ test_make_content[../test_files/content/table-with-mandatory-normal.docx-1-1-expected_result7] _

filename = '../test_files/content/table-with-mandatory-normal.docx', body = 1
paragraph = 1
expected_result = (True, ['Текущее положение вещей', 'Список использованных источников', 'Приложение А. Название приложения'], 0)

    @pytest.mark.parametrize("filename, body, paragraph, expected_result", [
        # Список без раздела "Заключение"
        (
            "../test_files/content/list-no-conclusion.docx", 0, 2, (False, None, None)
        ),
        # Список со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/list-with-mandatory-caps.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 8)
        ),
        # Список без некоторых требуемых отслеживаемых разделов (присутствующие отслеживаемые разделы в содержании капсом)
        # (нет переноса строки после содержания)
        (
            "../test_files/content/list-without-mandatory.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 7)
        ),
        # Список со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании обычным шрифтом)
        (
            "../test_files/content/list-with-mandatory-normal.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 8)
        ),
        # Таблица без раздела "Заключение"
        (
            "../test_files/content/table-no-conclusion.docx", 1, 1,
            (False, None, None)
        ),
        # Таблица со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/table-with-mandatory-caps.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Таблица без некоторых требуемых отслеживаемых разделов (присутствующие отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/table-without-mandatory.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Таблица со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании обычным шрифтом)
        (
            "../test_files/content/table-with-mandatory-normal.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Автосгенерированное содержание
        (
            "../test_files/content/toc.docx", 1, 1,
            (True, ["1. Первый раздел", "1.1. Первый подраздел первого раздела",
                    "1.2. Второй подраздел первого раздела", "2. ВТОРОЙ раздел", "2.1. Первый подраздел второго раздела",
                    "2.2. Второй подраздел второго раздела"], 0)
        )
    ])
    def test_make_content(filename, body, paragraph, expected_result):
>       assert PageCreator.make_content(docx2python(filename), body, paragraph) == expected_result
E       AssertionError: assert (False, None, None) == (True, ['Теку...иложения'], 0)
E         At index 0 diff: False != True
E         Use -v to get more diff

page_creator_test.py:114: AssertionError
____ test_make_content[../test_files/content/toc.docx-1-1-expected_result8] ____

filename = '../test_files/content/toc.docx', body = 1, paragraph = 1
expected_result = (True, ['1. Первый раздел', '1.1. Первый подраздел первого раздела', '1.2. Второй подраздел первого раздела', '2. ВТОРОЙ раздел', '2.1. Первый подраздел второго раздела', '2.2. Второй подраздел второго раздела'], 0)

    @pytest.mark.parametrize("filename, body, paragraph, expected_result", [
        # Список без раздела "Заключение"
        (
            "../test_files/content/list-no-conclusion.docx", 0, 2, (False, None, None)
        ),
        # Список со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/list-with-mandatory-caps.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 8)
        ),
        # Список без некоторых требуемых отслеживаемых разделов (присутствующие отслеживаемые разделы в содержании капсом)
        # (нет переноса строки после содержания)
        (
            "../test_files/content/list-without-mandatory.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 7)
        ),
        # Список со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании обычным шрифтом)
        (
            "../test_files/content/list-with-mandatory-normal.docx", 0, 2,
            (True, ["Изучение литературы", "Текст 1", "Текст 2"], 8)
        ),
        # Таблица без раздела "Заключение"
        (
            "../test_files/content/table-no-conclusion.docx", 1, 1,
            (False, None, None)
        ),
        # Таблица со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/table-with-mandatory-caps.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Таблица без некоторых требуемых отслеживаемых разделов (присутствующие отслеживаемые разделы в содержании капсом)
        (
            "../test_files/content/table-without-mandatory.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Таблица со всеми требуемыми отслеживаемыми разделами (отслеживаемые разделы в содержании обычным шрифтом)
        (
            "../test_files/content/table-with-mandatory-normal.docx", 1, 1,
            (True, ["Текущее положение вещей", "Список использованных источников", "Приложение А. Название приложения"], 0)
        ),
        # Автосгенерированное содержание
        (
            "../test_files/content/toc.docx", 1, 1,
            (True, ["1. Первый раздел", "1.1. Первый подраздел первого раздела",
                    "1.2. Второй подраздел первого раздела", "2. ВТОРОЙ раздел", "2.1. Первый подраздел второго раздела",
                    "2.2. Второй подраздел второго раздела"], 0)
        )
    ])
    def test_make_content(filename, body, paragraph, expected_result):
>       assert PageCreator.make_content(docx2python(filename), body, paragraph) == expected_result

page_creator_test.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

doc = DocxContent(docx_reader=DocxReader(), docx2python_kwargs={'docx_filename': '../test_files/content/toc.docx', 'image_folder': None, 'html': False, 'paragraph_styles': False, 'extract_image': None, 'docx_context': DocxReader()})
body_index = 1, paragraph_index = 1

    @staticmethod
    def make_content(doc, body_index, paragraph_index):
        new_chapters = []
        index = 0
>       if len(doc.body[body_index][0][0]) == paragraph_index + 1:
E       IndexError: list index out of range

../../document/page_creator.py:22: IndexError
=========================== short test summary info ============================
FAILED document_test.py::TestDocument::test_empty_file[LR-expected_errors0]
FAILED document_test.py::TestDocument::test_empty_file[FWQ-expected_errors1]
FAILED document_test.py::TestDocument::test_pre_made_failing_lab_docx[../test_files/docx/failing-5.docx-expected_errors4]
FAILED page_creator_test.py::test_make_content[../test_files/content/list-with-mandatory-caps.docx-0-2-expected_result1]
FAILED page_creator_test.py::test_make_content[../test_files/content/list-without-mandatory.docx-0-2-expected_result2]
FAILED page_creator_test.py::test_make_content[../test_files/content/list-with-mandatory-normal.docx-0-2-expected_result3]
FAILED page_creator_test.py::test_make_content[../test_files/content/table-with-mandatory-caps.docx-1-1-expected_result5]
FAILED page_creator_test.py::test_make_content[../test_files/content/table-without-mandatory.docx-1-1-expected_result6]
FAILED page_creator_test.py::test_make_content[../test_files/content/table-with-mandatory-normal.docx-1-1-expected_result7]
FAILED page_creator_test.py::test_make_content[../test_files/content/toc.docx-1-1-expected_result8]
=================== 10 failed, 18 passed in 92.00s (0:01:32) ===================
